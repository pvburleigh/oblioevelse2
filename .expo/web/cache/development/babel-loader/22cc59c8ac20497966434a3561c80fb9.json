{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nexport default function addPost(post) {\n  return new Promise(function _callee(resolve, reject) {\n    var validator, education;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            validator = Object.entries(post).find(function (prop) {\n              return !prop[1].length;\n            });\n\n            if (!validator) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", reject({\n              message: 'Alle felter skal udfyldes!'\n            }));\n\n          case 3:\n            _context.prev = 3;\n            education = false;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(firebase.database().ref(\"/Educations/\").child(post.educationId).on('value', function (snapshot) {\n              education = snapshot.val();\n            }));\n\n          case 7:\n            if (education) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", reject('University does not exist'));\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(firebase.database().ref('/Posts').push(post));\n\n          case 11:\n            return _context.abrupt(\"return\", resolve());\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", reject(\"Error: \" + _context.t0));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 14]], Promise);\n  });\n}","map":{"version":3,"sources":["/Users/philipvanburleigh/Desktop/oblioevelse2/components/dbFunctions/Post.js"],"names":["firebase","addPost","post","Promise","resolve","reject","validator","Object","entries","find","prop","length","message","education","database","ref","child","educationId","on","snapshot","val","push","console","log"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AACjC,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,SADS,GACGC,MAAM,CAACC,OAAP,CAAeN,IAAf,EAAqBO,IAArB,CAA0B,UAAAC,IAAI;AAAA,qBAAI,CAACA,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAb;AAAA,aAA9B,CADH;;AAAA,iBAEXL,SAFW;AAAA;AAAA;AAAA;;AAAA,6CAGJD,MAAM,CAAC;AAACO,cAAAA,OAAO,EAAC;AAAT,aAAD,CAHF;;AAAA;AAAA;AAMPC,YAAAA,SANO,GAMK,KANL;AAAA;AAAA,6CAOLb,QAAQ,CACTc,QADC,GAEDC,GAFC,iBAGDC,KAHC,CAGKd,IAAI,CAACe,WAHV,EAIDC,EAJC,CAIE,OAJF,EAIW,UAAAC,QAAQ,EAAI;AACrBN,cAAAA,SAAS,GAAGM,QAAQ,CAACC,GAAT,EAAZ;AACH,aANC,CAPK;;AAAA;AAAA,gBAcPP,SAdO;AAAA;AAAA;AAAA;;AAAA,6CAeAR,MAAM,CAAC,2BAAD,CAfN;;AAAA;AAAA;AAAA,6CAkBLL,QAAQ,CACTc,QADC,GAEDC,GAFC,CAEG,QAFH,EAGDM,IAHC,CAGInB,IAHJ,CAlBK;;AAAA;AAAA,6CAsBJE,OAAO,EAtBH;;AAAA;AAAA;AAAA;AAwBXkB,YAAAA,OAAO,CAACC,GAAR;AAxBW,6CAyBJlB,MAAM,yBAzBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AA4BH","sourcesContent":["import firebase from \"firebase\";\n\nexport default function addPost(post){\n    return new Promise(async (resolve, reject) => {\n        const validator = Object.entries(post).find(prop => !prop[1].length)\n        if (validator){\n            return reject({message:'Alle felter skal udfyldes!'})\n        }\n        try {\n            let education = false;\n            await firebase\n                .database()\n                .ref(`/Educations/`)\n                .child(post.educationId)\n                .on('value', snapshot => {\n                    education = snapshot.val()\n                });\n            if(!education){\n                return reject('University does not exist')\n            }\n\n            await firebase\n                .database()\n                .ref('/Posts')\n                .push(post);\n            return resolve();\n        } catch (error) {\n            console.log(error);\n            return reject(`Error: ${error}`);\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}