{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nexport default function addEducation(education) {\n  return new Promise(function _callee(resolve, reject) {\n    var validator, university;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            validator = Object.entries(education).find(function (prop) {\n              return !prop[1].length;\n            });\n\n            if (!validator) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", reject({\n              message: 'Alle felter skal udfyldes!'\n            }));\n\n          case 3:\n            _context.prev = 3;\n            university = false;\n            console.log(education.universityId);\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(firebase.database().ref(\"/Universities\").child(education.universityId).on('value', function (snapshot) {\n              university = snapshot.val();\n            }));\n\n          case 8:\n            if (university) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", reject('University does not exist'));\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(firebase.database().ref('/Educations').push(education));\n\n          case 12:\n            return _context.abrupt(\"return\", resolve());\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", reject(\"Error: \" + _context.t0));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 15]], Promise);\n  });\n}","map":{"version":3,"sources":["/Users/philipvanburleigh/Desktop/oblioevelse2/components/dbFunctions/Education.js"],"names":["firebase","addEducation","education","Promise","resolve","reject","validator","Object","entries","find","prop","length","message","university","console","log","universityId","database","ref","child","on","snapshot","val","push"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,YAAT,CAAsBC,SAAtB,EAAgC;AAC3C,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,SADS,GACGC,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,IAA1B,CAA+B,UAAAC,IAAI;AAAA,qBAAI,CAACA,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAb;AAAA,aAAnC,CADH;;AAAA,iBAEXL,SAFW;AAAA;AAAA;AAAA;;AAAA,6CAGJD,MAAM,CAAC;AAACO,cAAAA,OAAO,EAAC;AAAT,aAAD,CAHF;;AAAA;AAAA;AAMPC,YAAAA,UANO,GAMM,KANN;AAOXC,YAAAA,OAAO,CAACC,GAAR,CAAYb,SAAS,CAACc,YAAtB;AAPW;AAAA,6CAQLhB,QAAQ,CACTiB,QADC,GAEDC,GAFC,kBAGDC,KAHC,CAGKjB,SAAS,CAACc,YAHf,EAIDI,EAJC,CAIE,OAJF,EAIW,UAAAC,QAAQ,EAAI;AACrBR,cAAAA,UAAU,GAAGQ,QAAQ,CAACC,GAAT,EAAb;AACH,aANC,CARK;;AAAA;AAAA,gBAePT,UAfO;AAAA;AAAA;AAAA;;AAAA,6CAgBAR,MAAM,CAAC,2BAAD,CAhBN;;AAAA;AAAA;AAAA,6CAmBLL,QAAQ,CACTiB,QADC,GAEDC,GAFC,CAEG,aAFH,EAGDK,IAHC,CAGIrB,SAHJ,CAnBK;;AAAA;AAAA,6CAuBJE,OAAO,EAvBH;;AAAA;AAAA;AAAA;AAyBXU,YAAAA,OAAO,CAACC,GAAR;AAzBW,6CA0BJV,MAAM,yBA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AA6BH","sourcesContent":["import firebase from \"firebase\";\n\nexport default function addEducation(education){\n    return new Promise(async (resolve, reject) => {\n        const validator = Object.entries(education).find(prop => !prop[1].length)\n        if (validator){\n            return reject({message:'Alle felter skal udfyldes!'})\n        }\n        try {\n            let university = false;\n            console.log(education.universityId)\n            await firebase\n                .database()\n                .ref(`/Universities`)\n                .child(education.universityId)\n                .on('value', snapshot => {\n                    university = snapshot.val()\n                });\n            if(!university){\n                return reject('University does not exist')\n            }\n\n            await firebase\n                .database()\n                .ref('/Educations')\n                .push(education);\n            return resolve();\n        } catch (error) {\n            console.log(error);\n            return reject(`Error: ${error}`);\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}